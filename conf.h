/**
*	@file
*	@brief	Функции для работы с конфигурационным файлом. Заголовок.
*	@author Кузнецов Егор Ильич EIlKuznetsov@rosatom.ru Инженер 3 категории Отдел Системной Поддержки Проектов
*	@version	1.1.0
*	@date	11.03.2024
*/

//----------------------------------------------------------------
//  Автор
//----------------------------------------------------------------
//    Кузнецов Егор Ильич
//    EIlKuznetsov@rosatom.ru
//    Инженер 3 категории
//    Отдел Системной Поддержки Проектов
//----------------------------------------------------------------
//	11.03.2024
//----------------------------------------------------------------

#ifndef CONF_H
#define CONF_H

//----------------------------------------------------------------
//  Заголовки
//----------------------------------------------------------------
//		C Заголовки
//----------------------------------------------------------------
	#include <stdint.h>
	#include <string.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <errno.h>
	#include <ctype.h>
//----------------------------------------------------------------
//	Функции
//----------------------------------------------------------------
		/**
		*	@brief	Создает конфигурационный файл.
		*	@details	Создает конфигурационный файл с именем name.
		*
		*	@param[in]	name	Имя конфигурационного файла.
		*
		*	@return	0 в случае успеха. -1, если произошла ошибка.
		*/
		int8_t	createProp(const char*	name);
		/**
		*	@brief	Проверяет наличие конфигурационного файла.
		*	@details	Проверяет наличие конфигурационного файла с именем name.
		*
		*	@param[in]	name	Имя конфигурационного файла.
		*
		*	@return	1, если файл есть, 0, если файла нет.
		*/
		int8_t	existProp(const char*	name);
		/**
		*	@brief	Содержимое конфигурационного файла.
		*	@details	Получает содержимое конфигурационного файла с именем name размером length, выделяет буфер buf размером length и помещает содержимое в него. Буфер должен быть очищен после использования. 
		*
		*	@param[in]	name	Имя конфигурационного файла.
		*	@param[out]	buf	Указатель на буфер.
		*	@param[in]	length	Размер конфигурационного файла.
		*
		*	@return	0 в случае успеха, -1, если файл не удалось открыть, -2, если буфер не удалось выделить, -3, если в процессе чтения файла произошла ошибка.
		*/
		int8_t	contentProp(const char*	name, char**	buf, uint64_t	length);
		/**
		*	@brief	Содержимое конфигурационного файла.
		*	@details	Получает содержимое конфигурационного файла conf(файл должен быть открыт заранее) размером length и помещает его в буфер buf(буфер должен быть выделен заранее). Буфер buf должен быть очищен после использования. 
		*
		*	@param[in]	conf	Конфигурационный файл.
		*	@param[out]	buf	Указатель на буфер.
		*	@param[in]	length	Размер конфигурационного файла.
		*
		*	@return	0, в случае успеха, -1, если буфер не был выделен, -2, если возникла ошибка при чтении.
		*/
		int8_t	contentPropOpt(FILE*	conf, char**	buf, uint64_t	length);

		/**
		*	@brief	Получить размер конфигурационного файла.
		*	@details	Получает размер конфигурационного файла с именем name. 
		*
		*	@param[in]	name	Имя конфигурационного файла.
		*
		*	@return	0, в случае успеха, -1, если файл не удалось открыть.
		*/
		int64_t	sizeProp(const char*	name);
		/**
		*	@brief	Получить размер конфигурационного файла.
		*	@details	Получает размер конфигурационного файла prop(предполагается, что файл уже открыт). 
		*
		*	@param[in]	name	Имя конфигурационного файла.
		*
		*	@return	0, в случае успеха, -1, если файл не открыт.
		*/
		int64_t	sizePropOpt(FILE*	prop);

		/**
		*	@brief	Открыть файл для добавления.
		*	@details	Открывает файл с именем name для добавления. 
		*
		*	@param[in]	name	Имя конфигурационного файла.
		*	@param[in]	file	Файловая переменная.
		*
		*	@return	0, в случае успеха, -1, если файл не удалось открыть.
		*/
		int8_t	openFileAppend(const char*	name, FILE**	file);
		/**
		*	@brief	Закрыть файл.
		*	@details	Закрывает файл file. 
		*
		*	@param[in]	file	Файловая переменная.
		*
		*	@return	0, в случае успеха, -1, если файл не открыт.
		*/
		int8_t	closeFile(FILE*	file);

		/**
		*	@brief	Добавить ключ и строковое значение.
		*	@details	Добавляет ключ key и строковое значение value в файл с именем name. 
		*
		*	@param[in]	name	Имя конфигурационного файла.
		*	@param[in]	key	Ключ.
		*	@param[in]	value	Строковое значение.
		*
		*	@return	0, в случае успеха, -1, если файл не удалось открыть.
		*/
		int8_t	addKeyAndValueString(const char*	name, const char*	key, const char*	value);
		/**
		*	@brief	Добавить ключ и целочисленное значение.
		*	@details	Добавляет ключ key и целочисленное значение value в файл с именем name. 
		*
		*	@param[in]	name	Имя конфигурационного файла.
		*	@param[in]	key	Ключ.
		*	@param[in]	value	Целочисленное значение.
		*
		*	@return	0, в случае успеха, -1, если файл не удалось открыть.
		*/
		int8_t	addKeyAndValueInt(const char*	name, const char*	key, int32_t	value);
		/**
		*	@brief	Добавить ключ и символьное значение.
		*	@details	Добавляет ключ key и символьное значение value в файл с именем name. 
		*
		*	@param[in]	name	Имя конфигурационного файла.
		*	@param[in]	key	Ключ.
		*	@param[in]	value	Символьное значение.
		*
		*	@return	0, в случае успеха, -1, если файл не удалось открыть.
		*/
		int8_t	addKeyAndValueChar(const char*	name, const char*	key, char	value);
		/**
		*	@brief	Добавить секцию.
		*	@details	Добавляет секцию section в файл с именем name.
		*
		*	@param[in]	name	Имя конфигурационного файла.
		*	@param[in]	section	Секция.
		*
		*	@return	0, в случае успеха, -1, если файл не удалось открыть.
		*/
		int8_t	addSection(const char*	name, const char* section);

		/**
		*	@brief	Добавить ключ и строковое значение.
		*	@details	Добавляет ключ key и строковое значение value в файл file(предполагается, что файл был ранее открыт). 
		*
		*	@param[in]	file	Конфигурационный файл.
		*	@param[in]	key	Ключ.
		*	@param[in]	value	Строковое значение.
		*
		*	@return	0, в случае успеха, -1, если файл не был открыт.
		*/
		int8_t	addKeyAndValueStringOpt(FILE*	file, const char*	key, const char*	value);
		/**
		*	@brief	Добавить ключ и целочисленное значение.
		*	@details	Добавляет ключ key и целочисленное значение value в файл file(предполагается, что файл был ранее открыт). 
		*
		*	@param[in]	file	Конфигурационный файл.
		*	@param[in]	key	Ключ.
		*	@param[in]	value	Целочисленное значение.
		*
		*	@return	0, в случае успеха, -1, если файл не был открыт.
		*/
		int8_t	addKeyAndValueIntOpt(FILE*	file, const char*	key, int32_t	value);
		/**
		*	@brief	Добавить ключ и символьное значение.
		*	@details	Добавляет ключ key и символьное значение value в файл file(предполагается, что файл был ранее открыт). 
		*
		*	@param[in]	file	Конфигурационный файл.
		*	@param[in]	key	Ключ.
		*	@param[in]	value	Символьное значение.
		*
		*	@return	0, в случае успеха, -1, если файл не был открыт.
		*/
		int8_t	addKeyAndValueCharOpt(FILE*	file, const char*	key, char	value);
		/**
		*	@brief	Добавить секцию.
		*	@details	Добавляет секцию section в файл file(предполагается, что файл был ранее открыт).
		*
		*	@param[in]	file	Конфигурационный файла.
		*	@param[in]	section	Секция.
		*
		*	@return	0, в случае успеха, -1, если файл не открыт.
		**/
		int8_t	addSectionOpt(FILE*	file, const char* section);
		/**
		*	@brief	Получить ключи.
		*	@details	Получает ключи из содержимого конфигурационного файла content и помещает их в keys. Количество ключей помещается в sizeKeys. После использования необходимо освободить каждый элемент keys и сам keys при помощи free.
		*
		*	@param[in]	content	Содержимое конфигурационного файла.
		*	@param[in]	keys	Буфер ключей.
		*	@param[in]	sizeKeys	Количество ключей.
		*
		*	@return	0, в случае успеха, -1, если не удалось скопировать содержимое файла, -2, если не удалось выделить место под буфер ключей, -3, если удалось выделить память под ключ.
		**/
		int8_t	getKeys(char**	content, char***	keys, int32_t*	sizeKeys);
		/**
		*	@brief	Получить секции.
		*	@details	Получает секции из содержимого конфигурационного файла content и помещает их в sections. Количество ключей помещается в sizeSections. После использования необходимо освободить каждый элемент sections и сам sections при помощи free.
		*
		*	@param[in]	content	Содержимое конфигурационного файла.
		*	@param[in]	sections	Буфер секций.
		*	@param[in]	sizeSections	Количество секций.
		*
		*	@return	0, в случае успеха, -1, если не удалось скопировать содержимое файла, -2, если не удалось выделить место под буфер секций, -3, если удалось выделить память под секцию.
		**/
		int8_t	getSections(char**	content, char***	sections, int32_t*	sizeSections);
		/**
		*	@brief	Получить секцию.
		*	@details	Получает секцию section из содержимого конфигурационного файла content и помещает ее в buf. После использования необходимо buf при помощи free.
		*
		*	@param[in]	content	Содержимое конфигурационного файла.
		*	@param[in]	section	Секция, которую необходимо получить.
		*	@param[in]	buf	Буфер, в который необходимо получить секцию.
		*
		*	@return	0, в случае успеха, -1, если не удалось скопировать содержимое файла, -2, если не удалось найти секцию, -3, если удалось выделить память под секцию.
		**/
		int8_t	getSection(char**	content, char*	section, char**	buf);
		/**
		*	@brief	Проверить наличие секции.
		*	@details	Проверяет наличие секции section в содержимом content.
		*
		*	@param[in]	content	Содержимое конфигурационного файла.
		*	@param[in]	section	Секция, которую необходимо получить.
		*
		*	@return	0 или 1, в зависимости от наличия секции, -1, еcли не удалось сформировать строку секции.
		**/
		int8_t	existSection(char**	content, const char*	section);
		/**
		*	@brief	Проверить наличие ключа.
		*	@details	Проверяет наличие ключа key в содержимом content.
		*
		*	@param[in]	content	Содержимое конфигурационного файла.
		*	@param[in]	key	Ключ, который необходимо получить.
		*
		*	@return	0 или 1, в зависимости от наличия ключа, -1, еcли не удалось сформировать строку ключа.
		**/
		int8_t	existKey(char**	content, const char*	key);
		/**
		*	@brief	Получить целочисленное значение.
		*	@details	Получает целочисленное значение по ключу key из содержимого content и кладет его в value.
		*
		*	@param[in]	content	Содержимое конфигурационного файла.
		*	@param[in]	key	Ключ, значение по которому необходимо получить.
		*	@param[in]	value	Буфер, куда нужно положить значение.
		*
		*	@return	0 в случае успеха, -1, еcли не удалось скопировать содержимое, -2, если ключ не был найден, -3, если значения по ключу нету, -4, если значение не является числом.
		**/
		int8_t	getIntValue(char**	content,	const char*	key,	int32_t*	value);
		/**
		*	@brief	Получить символьное значение.
		*	@details	Получает символьное значение по ключу key из содержимого content и кладет его в value.
		*
		*	@param[in]	content	Содержимое конфигурационного файла.
		*	@param[in]	key	Ключ, значение по которому необходимо получить.
		*	@param[in]	value	Буфер, куда нужно положить значение.
		*
		*	@return	0 в случае успеха, -1, еcли не удалось скопировать содержимое, -2, если ключ не был найден, -3, если значения по ключу нету.
		**/
		int8_t	getCharValue(char**	content,	const char*	key,	char*	value);
		/**
		*	@brief	Получить строковое значение.
		*	@details	Получает строковое значение по ключу key из содержимого content и кладет его в value. После применения value должен быть очищен через free.
		*
		*	@param[in]	content	Содержимое конфигурационного файла.
		*	@param[in]	key	Ключ, значение по которому необходимо получить.
		*	@param[in]	value	Буфер, куда нужно положить значение.
		*
		*	@return	0 в случае успеха, -1, еcли не удалось скопировать содержимое, -2, если ключ не был найден, -3, если значения по ключу нету, -4, если не удалось выделить память под строку значения.
		**/
		int8_t	getStringValue(char**	content, const	char*	key, char**	value);
		/**
		*	@brief	Проверка строки на число.
		*	@details	Проверяет, является ли строка, числом.
		*
		*	@param[in]	line	Строка.
		*
		*	@return	1, если является. 0, если не является.
		*/
		int8_t	isNumber(char*	line);


#endif
